#!/bin/bash
ADB=adb

## rclone mount BRANCHBIT:q2_working_confirmed /tmp/mnt &

DEVICES=$($ADB devices 2>/dev/null)
DEVICECHECK=$(($(echo "$DEVICES" | grep device | wc -l) - 1))
if [ "$DEVICECHECK" == 2 ]; then
  echo "Multiple devices found, make sure there is only ONE adb connection (check using \"adb devices\")."
  #[ -z $CI ] && exit 1
fi
if [ "$DEVICECHECK" == 0 ]; then
  echo -e "No device connected, make sure there is ONE adb connection (check using \"adb devices\")."
  #[ -z $CI ] && exit 1
fi



function updatelocal() {
#(
  ORIBADGES=$(cat "/tmp/mnt/badgelist.txt")
  echo "loaded $(echo "$ORIBADGES" | wc -l) remote badges"

  echo "copying remote ori badges to local"
  cp "/tmp/mnt/badgelist.txt" "/tmp/badgelist.txt"

  LOCALBADGES=$(cat "/tmp/badgelist.txt")
  echo "loaded $(echo "$LOCALBADGES" | wc -l) local badges"

  echo -ne '' > "/tmp/newbadges.txt"



  COUNT=0
  ALLCOUNT=$(ls -l | grep "^d" | wc -l)


  for d in ./*; do

    ((COUNT++))
    [[ "$COUNT" -lt "3" ]] && continue
    PERCENT=$(awk "BEGIN {print int(100/$ALLCOUNT*$COUNT)}")
    if [[ -d "$d" ]]; then


        if [[ "$ORIBADGES" == *"$d"* ]] && [[ "$ORIBADGES" != "" ]]; then
          echo "skipping $d already in badgelist"
          continue
        else
          cd "$d"
          echo "$d not in badgelist"
        fi


        APKNAME=$(ls -t | grep -e "./*\.apk") && APKNAME=${APKNAME#/}
        pv "$APKNAME" > "/tmp/$APKNAME"
        echo "transfer done, now badging"
        BADGING=$(aapt dump badging "/tmp/$APKNAME")
        rm "/tmp/$APKNAME"


        PACKAGEVERSION=$(echo "$BADGING" | grep versionCode= | sed -E "s/.*Code='(.*)' version.*/\1/")
        PACKAGENAME=$(echo "$BADGING" | grep package:\ name | awk '/package/{gsub("name=|'"'"'","");  print $2}')
        #echo "now writing"
        #echo "# synced from without badgefile:$PACKAGENAME ($COUNT / $ALLCOUNT)"

        echo "updating local and remote BADGEFILES"
        echo "$PACKAGENAME|$PACKAGEVERSION|$d/$APKNAME" >>"/tmp/badgelist.txt" 2> /dev/null # to local tmp (user & ci)
        echo "$PACKAGENAME|$PACKAGEVERSION|$d/$APKNAME" >>"/tmp/newbadges.txt" 2> /dev/null # to local new (ci)
        echo "$PACKAGENAME|$PACKAGEVERSION|$d/$APKNAME" >>"/tmp/mnt/badgelist.txt" 2> /dev/null # to drive (ww)

        echo "$PERCENT"

      cd ../
    fi
  done

  cp "tmp/badgelist.txt" /tmp/mnt 2>/dev/null # to drive (ww)

  mkdir -p /tmp/badges
  cp "$ORIPATH/badgelist.txt" /tmp/badges 2>/dev/null #copy to build folder
  cp "/tmp/newbadges.txt" /tmp/badges 2>/dev/null #copy to build folder

  #) |
  #zenity --progress \
  #--title="Updating badgelist.txt" \
  #--text="Please wait" \
  #--percentage=0

}





ORIPATH=$PWD
cd /tmp/mnt

[ -z $CI ] && zenity --question --width=800 --text="Update and use local versionlist? ($(date -r "$ORIPATH/badgelist.txt" +"%Y-%m-%d %H:%M:%S")) ($(cat "$ORIPATH/badgelist.txt" | wc -l) items)\n\n
  If not we will use the remote one from ($(date -r "/tmp/mnt/badgelist.txt" +"%Y-%m-%d %H:%M:%S")) ($(cat "/tmp/mnt/badgelist.txt" | wc -l) items) and copy to local."
if [ $? != 0 ]; then
  [ -z $CI ] && cp /tmp/mnt/badgelist.txt "$ORIPATH/badgelist.txt"
else
  [ -z $CI ] && updatelocal
  echo -n ''
fi

[ ! -z $CI ] && updatelocal

INSTALLEDPACKAGES="$(adb shell cmd package list packages -3 | cut -f 2 -d":")"

echo -e "CHECKING INSTALLED APPS: \n==========================\n$INSTALLEDPACKAGES\n==========================\n"
echo -e "\nCHECKING DRIVE FOR UPDATES: \n=========================="
#echo "INSTALLED PACKAGES:"
IFS='
'
for line in $INSTALLEDPACKAGES; do
  CHECKED=FALSE
  PACKAGETOCHECK="$line"
  #echo "CHECKING $PACKAGETOCHECK"
  OLDVERSION=$(adb shell dumpsys package $PACKAGETOCHECK)
  regex="versionCode=([0-9]*)"

  [[ $OLDVERSION =~ $regex ]]
  VERSIONTOCHECK=${BASH_REMATCH[1]}
  #echo "${BASH_REMATCH[0]}"
  #echo old version: $VERSIONTOCHECK
  #echo "$line"

  while read badgeline; do
    #echo "checking $line against $PACKAGETOCHECK"
    if [[ "$badgeline" == *"$PACKAGETOCHECK"* ]]; then
      CHECKED=TRUE
      #echo "MATCH"
      APKNAME=${badgeline%%|*}
      APKLOC=${badgeline##*|}
      APKVERSION=${badgeline#*|}
      APKVERSION=${APKVERSION%|*}
      #echo "INSTALLED: $APKNAME"
      #echo "LOCATION ON DRIVE: $APKLOC"
      #echo "VERSION ON DRIVE: $APKVERSION"
      if [[ "$APKVERSION" -gt "$VERSIONTOCHECK" ]]; then
        echo "<b>[+] NEWER VERSION OF $(echo "$APKNAME") FOUND, CURRENT: ($(echo "$VERSIONTOCHECK")), DRIVE: ($(echo "$APKVERSION"))</b>"
      elif [[ "$APKVERSION" -lt "$VERSIONTOCHECK" ]]; then
        echo "[-] OLDER VERSION OF $(echo "$APKNAME") FOUND, CURRENT: ($(echo "$VERSIONTOCHECK")), DRIVE: ($(echo "$APKVERSION"))"
      elif [[ "$APKVERSION" -eq "$VERSIONTOCHECK" ]]; then
        echo "[=] SAME VERSION OF $(echo "$APKNAME") FOUND, CURRENT: ($(echo "$VERSIONTOCHECK")), DRIVE: ($(echo "$APKVERSION"))"
      fi
    fi
    #echo "$line"
  done <"$ORIPATH/badgelist.txt"

done

echo -e "==========================\n"
