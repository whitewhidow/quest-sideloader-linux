#!/bin/bash
source $HOME/quest-sideloader-linux/sideloader-config.txt

intro

osCheck

versionCheck

packageCheck






if [ $# -eq 0 ]; then
  echo "No arguments supplied"
  exit
else
  APKNAME=$1
fi
[[ ! -f $APKNAME ]] && error "$APKNAME is not a valid path to an apk" || ok "APK selected: $APKNAME"









#start











if [ $OSTYPE == "mac" ]; then
    if ! command -v aapt &> /dev/null; then	
	    warning "PLEASE INSTALL aapt from androidaapt.com, WE WILL JUST DOWNLOAD LOCALLY FOR NOW, NO WORRIES !"
	    info "DOWNLOADING https://raw.githubusercontent.com/whitewhidow/quest-sideloader-linux/main/mac_aapt_lib/aapt"
	    curl -s https://raw.githubusercontent.com/whitewhidow/quest-sideloader-linux/main/mac_aapt_lib/aapt -o aapt
	    chmod +x ./aapt
	    AAPT="./aapt"
	    warning "PLEASE INSTALL aapt from androidaapt.com to avoid this download in the future !!"
    fi
fi





#device test
deviceCheck




#aapt test and packagename setup
if ([[ "$PWD" == *"/tmp/"* ]] || [[ "$PWD" == *"ftp:host"* ]]); then
    info "MOUNT DETECTED, WILL COPY APK TO TEMP DIR, TO SUCCESSFULLY RUN AAPT AGAINST IT."
    pv "$APKNAME" > "/tmp/$APKNAME"
    PACKAGENAME=$($AAPT dump badging "/tmp/$APKNAME" | grep package:\ name | awk '/package/{gsub("name=|'"'"'","");  print $2}')
    PACKAGEVERSION=$($AAPT dump badging "/tmp/$APKNAME" | grep versionCode= | sed -E "s/.*Code='(.*)' version.*/\1/")
    #rm "/tmp/$APKNAME"
else
    PACKAGENAME=$($AAPT dump badging "$APKNAME" | grep package:\ name | awk '/package/{gsub("name=|'"'"'","");  print $2}')
    PACKAGEVERSION=$($AAPT dump badging "$APKNAME" | grep versionCode= | sed -E "s/.*Code='(.*)' version.*/\1/")
fi
ok "Package info detected: ${BLUE}$PACKAGENAME, VERSION: $PACKAGEVERSION"
#end aapt test and packagename setup




# $ADB shell dumpsys package my.package | grep versionName



#obb test
OBBCOUNT=$(find ./ -name "*.obb" | wc -l)
OBBLOCS=$(find ./ -name "*.obb" | sed 's/.\/\//.\//')
if [[ $OBBCOUNT -gt 0 ]] ; then
 for file in $OBBLOCS; do
    [[ ! -e $file ]] && continue
    ok "OBB FOUND: ${BLUE}$file"
 done
fi
#end obb test


[ -z $CI ] && OLDVERSION=$($ADB shell dumpsys package $PACKAGENAME)
regex="versionCode=([0-9]*)"
if [[ $OLDVERSION =~ $regex ]]; then
  OLDVERSION=${BASH_REMATCH[1]}
  if [ "$OLDVERSION" -lt  "$PACKAGEVERSION" ]; then
    DIRECTION='up'
  fi
  if [ "$OLDVERSION" -gt  "$PACKAGEVERSION" ]; then
    DIRECTION='down'
  fi
  if [ "$OLDVERSION" ==  "$PACKAGEVERSION" ]; then
    DIRECTION='same'
  fi
else
  DIRECTION='none'
fi

#versionName=1.3.6.3 | cut -c 13-


#ask verification




printf "\n"
echo -e "${BLUE}"

if [ "$DIRECTION" == 'up' ]; then
  LINE="YOU ARE ABOUT TO UPGRADE: [$PACKAGENAME] \n\nFROM VERSION [$OLDVERSION] TO VERSION [$PACKAGEVERSION] \n\nAND COPY $OBBCOUNT OBB FILES ONTO [$DEVICE] !"
fi
if [ "$DIRECTION" == 'down' ]; then
  LINE="YOU ARE ABOUT TO DOWNGRADE: [$PACKAGENAME]\n\nFROM VERSION [$OLDVERSION] TO VERSION [$PACKAGEVERSION] \n\nAND COPY $OBBCOUNT OBB FILES ONTO [$DEVICE] !"
fi
if [ "$DIRECTION" == 'same' ]; then
  LINE="YOU ARE ABOUT TO REINSTALL VERSION [$OLDVERSION] OF [$PACKAGENAME] \n\nAND COPY $OBBCOUNT OBB FILES ONTO [$DEVICE] !"
fi
if [ "$DIRECTION" == 'none' ]; then
  LINE="YOU ARE ABOUT TO INSTALL: [$PACKAGENAME] VERSION [$PACKAGEVERSION] \n\nAND COPY $OBBCOUNT OBB FILES ONTO [$DEVICE] !"
fi
echo -e "${GREEN}$LINE${BLUE}\n\n"

[ -z $CI ] && zenity --question --width=800 --text="$(echo -e "$LINE")\n\n<b><u>VERIFY THE ABOVE INFO, AND CONFIRM THAT YOU WANT TO PROCEED</u></b>"
#if [ $? != 0 ]; then
#   exit 0
#fi


#read -p "VERIFY THE ABOVE INFO, AND CLICK ANY KEY TO CONINUE, or CTRL+C to Cancel"
echo ''






printf "\n"
printf "\n"
















info "(Re)Installing $PACKAGENAME, (please wait)"
[ -z $CI ] && $ADB uninstall "$PACKAGENAME" > /dev/null
[ -z $CI ] && $ADB install -g -d "$APKNAME" > /dev/null
ok "(Re)Installed $PACKAGENAME"
#uninstall and install




#copy and move obb
for file in $OBBLOCS; do
    [[ ! -e $file ]] && continue  # continue, if file does not exist
    HASOBBS=true

    file=$(echo "$file" | sed 's/.\/\//.\//')

    OBBFILE=$(echo "$file" | cut -c 3-)
    OBBNAME=$(echo $OBBFILE | awk -F'/' '{print $2}')
    OBBNAME=${OBBNAME#/}
    OBBFILE=${OBBFILE#/}
    OBBFILENAME=$(echo "$OBBFILE" | sed 's:.*/::' | sed 's/.\/\//.\//')


    info "Removing old OBB file: $OBBFILE (in case previously installed)"
    [ -z $CI ] && $ADB shell rm -r $STORAGE/obb/$PACKAGENAME 2> /dev/null
    [ -z $CI ] && $ADB shell rm -r $STORAGE/Android/obb/$PACKAGENAME 2> /dev/null
    ok "Removed old OBB file: $OBBFILE"
    
    info "Pushing new OBB file: $OBBFILE to $STORAGE/Download/obb/$PACKAGENAME"
    
    #echo "PACKAGENAME:$PACKAGENAME"
    #echo "OBBFILE:$OBBFILE"
    #echo "OBBFILENAME:$OBBFILENAME"

    if ([[ "$PWD" == *"/tmp/"* ]] || [[ "$PWD" == *"ftp:host"* ]]); then
      info "MOUNT DETECTED, WILL COPY OBB TO TEMP DIR, TO SUCCESSFULLY COPY TO HMD."
      pv "$OBBFILE" > "/tmp/$OBBFILENAME"
      $ADB push "/tmp/$OBBFILENAME" $STORAGE/Download/obb/$PACKAGENAME/$OBBFILENAME
      rm "/tmp/$OBBFILENAME"
    else
      [ -z $CI ] && $ADB push "$OBBFILE" $STORAGE/Download/obb/$PACKAGENAME/$OBBFILENAME
    fi

    ok "Pushed new OBB file: $OBBFILE"	
done



if [[ $HASOBBS == true ]] ; then
    info "Moving OBB files to correct directory: $STORAGE/Android/obb/$PACKAGENAME, please be patient, this step has no progress indicator"
    #echo "$ADB shell mv $STORAGE/Download/obb/$PACKAGENAME/ $STORAGE/Android/obb/$PACKAGENAME/"
    [ -z $CI ] && $ADB shell mv $STORAGE/Download/obb/$PACKAGENAME/ $STORAGE/Android/obb/$PACKAGENAME/
    info "Moved OBB files to correct directory"
fi
#end copy and move obb




ok ""
ok "APK Installed and $OBBCOUNT OBB files copied."
ok "Prompting settings."



sideload-change-settings "$PACKAGENAME"


ok ""
ok ""
ok "DONE, install finished, you can now disconnect your device"
